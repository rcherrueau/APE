<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 <!--
   How to create project :
    1. mvn archetype:generate \
        -DgroupId=fr.rol3x.websocket \
        -DartifactId=clock-stream \
        -Dversion=1.0-SNAPSHOT \
        -DarchetypeArtifactId=maven-archetype-webapp
    2. mkdir -p src/main/scala/fr/rol3x/websocket/
    3. http://code.google.com/p/esmi/wiki/CreatingScalaMavenProjectsInEclipse :
        a) Install the scala eclipse plugin
        b) Right click on the project. Go to the Scala Menu and select
           "Add Scala Nature"
        c) Update pom.xml
        <project>
          ...
          <dependencies>
            <dependency>
              <groupId>org.scala-lang</groupId>
              <artifactId>scala-library</artifactId>
              <version>2.7.2</version>
            </dependency>
            ...
          </dependencies>
          ...
          <build>
            ...
            <plugins>
              ...
              <plugin>
                <groupId>org.scala-tools</groupId>
                <artifactId>maven-scala-plugin</artifactId>
                <executions>
                  <execution>
                    <goals>
                      <goal>add-source</goal>
                      <goal>compile</goal>
                      <goal>testCompile</goal>
                    </goals>
                  </execution>
                </executions>
              </plugin>
              ...
            </plugins>
          </build>
          ...
        </project>
 -->
 <modelVersion>4.0.0</modelVersion>
 <groupId>fr.rol3x.websocket</groupId>
 <artifactId>clock-stream</artifactId>
 <packaging>war</packaging>
 <version>1.0-SNAPSHOT</version>
 <name>Clock WebSocket Stream</name>
 <url>http://maven.apache.org</url>

 <properties>
   <scala.version>2.9.1-1</scala.version>
   <jetty.version>10.0.10</jetty.version>
 </properties>

 <dependencies>
  <dependency>
   <groupId>junit</groupId>
   <artifactId>junit</artifactId>
   <version>4.13.1</version>
   <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>org.scala-lang</groupId>
    <artifactId>scala-library</artifactId>
    <version>${scala.version}</version>
  </dependency>
  <dependency>
   <groupId>org.eclipse.jetty</groupId>
   <artifactId>jetty-server</artifactId>
   <version>${jetty.version}</version>
  </dependency>
  <dependency>
   <groupId>org.eclipse.jetty</groupId>
   <artifactId>jetty-websocket</artifactId>
   <version>${jetty.version}</version>
  </dependency>
  <dependency>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-webapp</artifactId>
    <version>${jetty.version}</version>
  </dependency>
  <dependency>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-servlets</artifactId>
    <version>${jetty.version}</version>
  </dependency>
 </dependencies>

 <build>
  <finalName>clock-stream</finalName>
  <plugins>
   <plugin>
    <groupId>org.mortbay.jetty</groupId>
    <artifactId>jetty-maven-plugin</artifactId>
    <version>${jetty.version}</version>
    <configuration>
     <scanIntervalSeconds>10</scanIntervalSeconds>
     <webAppConfig>
      <contextPath>/clock-webapp</contextPath>
      <descriptor>${basedir}/src/main/webapp/web.xml</descriptor>
     </webAppConfig>
    </configuration>
   </plugin>
   <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
     <fork>true</fork>
     <meminitial>128m</meminitial>
     <maxmem>512m</maxmem>
     <source>1.6</source>
     <target>1.6</target>
     <minmemory>256m</minmemory>
     <maxmemory>2048m</maxmemory>
    </configuration>
   </plugin>
   <plugin>
     <groupId>org.scala-tools</groupId>
     <artifactId>maven-scala-plugin</artifactId>
     <executions>
       <execution>
         <goals>
           <goal>add-source</goal>
           <goal>compile</goal>
           <goal>testCompile</goal>
         </goals>
       </execution>
     </executions>
   </plugin>
   <!--
     Build and Sign Jar
     $ mvn jar:jar

     The Maven JAR plugin packages the compiled classes and resources into a
     JAR file and sets the Main-Class and Class-Path parameters in the
     MANIFEST.MF file. In this case, the class path entries are all preceded by
     lib/. This will let the dependency JAR files be packaged under a lib
     subdirectory later
   -->
   <!--
   <plugin>
     <artifactId>maven-jar-plugin</artifactId>
     <configuration>
       <archive>
         <manifest>
           <mainClass>fr.rol3x.websocket.JettyLauncher</mainClass>
           <addClasspath>true</addClasspath>
           <classpathPrefix>lib/</classpathPrefix>
         </manifest>
       </archive>
     </configuration>
   </plugin>
 -->

   <!--
     The dependency plugin provides the capability to manipulate artifacts. It
     can copy and/or unpack artifacts from local or remote repositories to a
     specified location.

     The Maven Dependency plugin copies the Maven dependencies into the a
     directory under the build path. This will allow inclusion of dependent
     JAR files in the final package.
    -->
   <!--
   <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-dependency-plugin</artifactId>
     <executions>
       <execution>
         <id>copy-dependencies</id>
         <phase>package</phase>
         <goals>
           <goal>copy-dependencies</goal>
         </goals>
         <configuration>
           <outputDirectory>${project.build.directory}/lib</outputDirectory>
           <overWriteReleases>false</overWriteReleases>
           <overWriteSnapshots>false</overWriteSnapshots>
           <overWriteIfNewer>true</overWriteIfNewer>
           <archive>
             <manifest>
               <mainClass>fr.rol3x.websocket.JettyLauncher</mainClass>
             </manifest>
           </archive>
         </configuration>
       </execution>
     </executions>
   </plugin>
   -->
   <!--
     The Assembly Plugin for Maven is primarily intended to allow users to
     aggregate the project output along with its dependencies, modules, site
     documentation, and other files into a single distributable archive.

     The Maven Assembly plugin performs the final packaging as specified by the
     package.xml descriptor :

     <?xml version="1.0" encoding="UTF-8"?>
     <assembly>
       <id>package</id>
       <formats>
         <format>tar.gz</format>
       </formats>
       <fileSets>
         <fileSet>
           <directory>target</directory>
           <outputDirectory></outputDirectory>
           <includes>
             <include>*.jar</include>
           </includes>
         </fileSet>
         <fileSet>
           <directory>target/lib</directory>
           <outputDirectory>lib</outputDirectory>
           <includes>
             <include>*.jar</include>
           </includes>
         </fileSet>
     </fileSets>
   </assembly>

   The package.xml descriptor generates a .tar.gz file containing the project
   JAR file as well as the dependency JAR files under a lib subdirectory.

   Self contained JAR, according to
   http://earldouglas.com/a-self-contained-runnable-web-application/
   Now a package can be created by running:
   $ mvn package
   This package can be extracted anywhere, and the web application run with:
   $ java -jar selfcontained.jar
   -->
   <!--
   <plugin>
     <artifactId>maven-assembly-plugin</artifactId>
     <executions>
       <execution>
         <id>assembly</id>
         <phase>package</phase>
         <goals>
           <goal>assembly</goal>
         </goals>
         <configuration>
           <descriptors>
             <descriptor>src/main/assembly/package.xml</descriptor>
           </descriptors>
           <archive>
             <manifest>
               <mainClass>fr.rol3x.websocket.JettyLauncher</mainClass>
             </manifest>
           </archive>
         </configuration>
       </execution>
     </executions>
   </plugin>
   -->
   <plugin>
     <artifactId>maven-assembly-plugin</artifactId>
     <version>2.3</version>
     <configuration>
       <descriptorRefs>
         <descriptorRef>jar-with-dependencies</descriptorRef>
       </descriptorRefs>
       <archive>
         <manifest>
           <mainClass>fr.rol3x.websocket.JettyLauncher</mainClass>
         </manifest>
       </archive>
     </configuration>
     <executions>
       <execution>
         <id>make-assembly</id> <!-- this is used for inheritance merges -->
         <phase>package</phase> <!-- bind to the packaging phase -->
         <goals>
           <goal>single</goal>
         </goals>
       </execution>
     </executions>
   </plugin>
  </plugins>
 </build>
</project>

